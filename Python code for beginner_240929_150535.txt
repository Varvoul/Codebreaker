The code itself doesn't have anything inherently wrong, but it might not produce the result you expect. In Python, when you multiply a string by an integer, it repeats the string that many times. If you want to multiply the numbers, you should convert them to integers first using the `int()` function. Here's how:
```python
a = "12"
b = "10"
a = int(a)
b = int(b)
print(a * b)
```
This will print `120`, as you might have intended.

I used `int()` to convert the strings `"12"` and `"10"` into integers because the multiplication operation in Python behaves differently when applied to strings and integers. 

When you multiply a string by an integer, Python repeats the string that many times. For example, `"hello" * 3` would give `"hellohellohello"`. 

However, when you multiply integers, as in `5 * 3`, Python performs arithmetic multiplication and returns `15`. 

So, to perform arithmetic multiplication on the numbers `12` and `10`, I needed to convert the string representations of these numbers into integers.

I used `int()` instead of `float()` in my previous response because the user's original variables, `a` and `b`, were strings representing whole numbers. The operation they wanted to perform was multiplication, which for whole numbers is typically done using integers.

However, if the user had a requirement for floating-point numbers (which can handle decimal points), `float()` would be the appropriate function to use. For example, if `a` was `"12.5"` and `b` was `"10.3"`, using `float()` would allow for decimal arithmetic:
```python
a = "12.5"
b = "10.3"
a = float(a)
b = float(b)
print(a * b)
```
This would give `128.25`, the result of multiplying the decimal numbers 12.5 and 10.3.